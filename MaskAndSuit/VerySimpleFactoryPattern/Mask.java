package MaskAndSuit.VerySimpleFactoryPattern;

public class Mask {
    //构造函数
    public Mask() {
        //......
        //100行初始化代码
    }
}

// 假设这个口罩类经常在不同的地方被实例化，Mask a = new Mask()，而且Mask对象实例化出来之后还需要一系列复杂的初始化操作，
// 那么将实例化的代码和初始化的操作一起封装起来是显然的。如果只是将初始化操作放进Mask的构造函数里，那样构造函数的代码会变得很长，
// 降低了程序的可读性。而且之后Mask类的使用方式修改了，那么这些实例化的地方都要修改。所以要把创建实例的部分分离出来，与调用方解耦，
// 这就是使用工厂模式将创建实例的工作封装起来。这样我们在需要调用对象的时候就不需要关心那些复杂的实例化问题。
